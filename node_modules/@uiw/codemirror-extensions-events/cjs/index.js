"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.content = content;
exports.dom = dom;
exports.scroll = scroll;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _view = require("@codemirror/view");

function events(opts) {
  var _opts$type = opts.type,
      type = _opts$type === void 0 ? 'scroll' : _opts$type,
      events = opts.events;
  return _view.ViewPlugin.fromClass( /*#__PURE__*/function () {
    function _class2(view) {
      var _this = this;

      (0, _classCallCheck2["default"])(this, _class2);
      (0, _defineProperty2["default"])(this, "dom", void 0);
      (0, _defineProperty2["default"])(this, "view", void 0);
      this.view = view;

      if (type === 'dom') {
        this.dom = view.dom;
      } else if (type === 'content') {
        this.dom = view.contentDOM;
      } else {
        this.dom = view.scrollDOM;
      }

      Object.keys(events || {}).forEach(function (keyname) {
        if (events && events[keyname] && _this.dom) {
          _this.dom.addEventListener(keyname, events[keyname]);
        }
      });
    }

    (0, _createClass2["default"])(_class2, [{
      key: "destroy",
      value: function destroy() {
        var _this2 = this;

        Object.keys(events || {}).forEach(function (keyname) {
          if (events && events[keyname] && _this2.dom) {
            _this2.dom.removeEventListener(keyname, events[keyname]);
          }
        });
      }
    }]);
    return _class2;
  }());
}
/**
 * The DOM element that can be styled to scroll.
 * (Note that it may not have been, so you can't assume this is scrollable.)
 */


function dom(opts) {
  return events({
    type: 'dom',
    events: opts
  });
}
/**
 * The DOM element that wraps the entire editor view.
 */


function scroll(opts) {
  return events({
    type: 'scroll',
    events: opts
  });
}
/**
 * The editable DOM element holding the editor content.
 * You should not, usually, interact with this content directly though the DOM,
 * since the editor will immediately undo most of the changes you make.
 */


function content(opts) {
  return events({
    type: 'content',
    events: opts
  });
}
//# sourceMappingURL=index.js.map